Solution1 先将字符串排序，然后使用回溯加剪枝，重点注意剪枝条件
class Solution {
public:
    vector<string> permutation(string s1) {
        int n = s1.size();
        sort(s1.begin(), s1.end(),greater<char>());
        vector<string> store;
        string temp1;
        vector<bool> d(n,false);
        function<void(int,string&)> dfs = [&](int cur,string & temp) -> void{
            if(cur == n){
                store.push_back(temp);
                return ;
            }
            for(int i = 0; i < n; i++)
            {
                if(d[i] == true || (i > 0 && s1[i - 1] == s1[i] && !d[i - 1]))continue;//剪枝条件
                if(d[i] == false){
                temp.push_back(s1[i]);
                d[i] = true;
                dfs(cur + 1, temp);
                temp.erase(temp.end() - 1);
                d[i] = false;
                }
            }
        };
        dfs(0,temp1);
        return store;
    }
};