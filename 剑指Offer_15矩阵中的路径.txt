class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
      row = board.size();
      col = board[0].size();
      for(int i = 0; i<row; i++) 
      {
          for(int j = 0; j<col; j++)
          {
              if(DFS(i,j,board,word,0) == true)
                return true;
          }
      }
      return false;
    }
    bool DFS(int i , int j , vector<vector<char>> & board, string word, int x)
    {
      if(i < 0 || i >= row || j < 0 || j>= col || board[i][j] != word[x])
          return false;
      if(x == word.size() - 1)return true;
      board[i][j] = '\0';
      bool flag = DFS(i+1,j,board,word,x+1) || DFS(i-1,j,board,word,x+1) ||
                  DFS(i,j-1,board,word,x+1) || DFS(i,j+1,board,word,x+1);
      board[i][j] = word[x];
      return flag; 
    }
    private:
    int col;
    int row;
};