Solution 1，没有使用hash表，看上去代码笨笨的
class Solution {
public:
    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {
        int arr_n = arr.size();
        int pieces_n = pieces.size();
        int cnt = 0;
        while(true )
        {
            int data = arr[cnt];
            int index = -1;
            for(int i = 0; i<pieces.size(); i++)
            {
                if(data == pieces[i][0])
                {
                    index = i;
                    break;
                }
            }
            if(index == -1)return false;
            int flag = 0;
            for(int i = 0; i<pieces[index].size();i++)
            {
                cout<<cnt<<' ';
                if(arr[cnt++] != pieces[index][i])
                    {flag = 1;break;}
            }
            if(flag == 0)
            {
                pieces.erase(pieces.begin()+index);
            }
            if(cnt >= arr_n && flag==1) return false;
            if(cnt >= arr_n)return true;
        }
    }
};

Solution2使用hash表
class Solution {
public:
    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {
       unordered_map<int, int> index ;
       for(int i = 0; i<pieces.size();i++)     
       {
           index[pieces[i][0]] = i;
       }
       int cnt = 0;
       for(int i = 0; i<arr.size(); )
       {
           auto it = index.find(arr[i]);
           if(it == index.end())
                return false;

           for(auto x : pieces[it->second]) 
           {
               if(arr[i++] != x)
                    return false; 
           }
       }
       return true;
    }
};